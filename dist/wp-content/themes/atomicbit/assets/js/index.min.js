!function(){$(function(){$(".menu").each(function(){new n($(this))})});var n=function(n){var i=n,c=$(".menu-mobile-btn"),o=i.find(".menu__close"),u=function(){t()},t=function(){c.on("click",function(){e()}),o.on("click",function(){f()})},e=function(){i.addClass("visible")},f=function(){i.removeClass("visible")};u()}}();
!function(){"use strict";$(function(){$(window).on({load:function(){$("html, body").animate({scrollTop:0},1)}}),$.each($(".sub-menu"),function(){new n($(this))}),$(".site").each(function(){new e($(this))})});var n=function(n){var e=n,t=e.find(".sub-menu__swiper"),o=(t.find(".sub-menu__item"),$(window),function(){t=new Swiper(t,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loopAdditionalSlides:0,loop:!1})}),i=function(){},s=function(){i(),o()};s()},e=function(n){var e=this,t=n,o=$(window),i=$(".site__footer"),s=i.find(".site__footer-logo"),a=!0,r=function(){o.on({scroll:function(){var n=$(window).scrollTop();l(n),s.offset().top-n<1.1*$(window).height()?i.addClass("is-inview"):i.removeClass("is-inview")},mousewheel:function(n){a&&(n.preventDefault(),c(n))},DOMMouseScroll:function(n){a&&(n.preventDefault(),c(n))}})},l=function(n){$(".hero__title").each(function(e){var t=$(this),o=.8;switch(e){case 0:t.css({"-webkit-transform":"translate( "+-n*o+"px, 0px )",transform:"translate( "+-n*o+"px, 0px )"});break;case 1:t.css({"-webkit-transform":"translate( "+-n*o*2+"px, 0px )",transform:"translate( "+-n*o*2+"px, 0px )"})}})},c=function(n){var e=1.2,t=170,i=n.originalEvent.wheelDelta/120||-n.originalEvent.detail/3,s=o.scrollTop(),a=s-parseInt(i*t);TweenMax.to(o,e,{scrollTo:{y:a,autoKill:!0},ease:Power1.easeOut,overwrite:5})},f=function(){t[0].obj=e,r()};e.setCanUseScroll=function(n){a=n},f()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
