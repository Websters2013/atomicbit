!function(){$(function(){$(".menu").each(function(){new n($(this))})});var n=function(n){var i=n,e=$(".menu-mobile-btn"),o=$("html"),t=i.find(".menu__close"),c=function(){u()},u=function(){e.on("click",function(){return f(),!1}),t.on("click",function(){return l(),!1})},f=function(){i.addClass("visible"),o.css("overflow-y","hidden")},l=function(){i.removeClass("visible"),o.removeAttr("style")};c()}}();
!function(){"use strict";$(function(){$(window).on({load:function(){$("html, body").animate({scrollTop:0},1)}}),$.each($(".site__header"),function(){new n($(this))}),$.each($(".anchor"),function(){new t($(this))}),$.each($(".sub-menu"),function(){new o($(this))}),$.each($(".site"),function(){new e($(this))})});var t=function(t){var n=t,o=$("html, body"),e=$(window),i=function(){n.on({click:function(){var t=$(this),n=t.data("margin");return void 0==n&&e.outerWidth()<1200?n=60:void 0==n&&e.outerWidth()>=1200&&(n=80),o.animate({scrollTop:$(t.attr("href")).offset().top-n},600),!1}})},s=function(){i()};s()},n=function(t){var n=t,o=$(window),e=function(){o.on({scroll:function(){o.scrollTop()>n.outerHeight()?n.addClass("fixed"):n.removeClass("fixed")}})},i=function(){e()};i()},o=function(t){var n=t,o=n.find(".sub-menu__swiper"),e=(o.find(".sub-menu__item"),$(window),function(){o=new Swiper(o,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loopAdditionalSlides:0,loop:!1})}),i=function(){},s=function(){i(),e()};s()},e=function(t){var n=this,o=t,e=$(window),i=!0,s=function(){e.on({scroll:function(){var t=$(window).scrollTop();a(t)},mousewheel:function(t){i&&(t.preventDefault(),c(t))},DOMMouseScroll:function(t){i&&(t.preventDefault(),c(t))}})},a=function(t){t<100?$(".hero__logo").each(function(){var n=$(this),o=-.9;n.removeClass("topper"),n.css({top:t*o})}):t>=100&&$(".hero__logo").each(function(){var n=$(this),o=.2;n.addClass("topper"),n.css({"-webkit-transform":"translate( 0px, "+t*o+"px )",transform:"translate( 0px, "+t*o+"px )"})}),$(".hero__logo-name-shadow").each(function(){var n=$(this),o=.005;n.css({opacity:2-(t+200)*o})}),$(".services__title").each(function(){var n=$(this),o=.2;n.css({"-webkit-transform":"translate( "+t*o+"px, 0px )",transform:"translate( "+t*o+"px, 0px )"})}),$(".services__subtitle").each(function(){var n=$(this),o=.05;n.css({"-webkit-transform":"translate( 0px, "+t*o+"px )",transform:"translate( 0px, "+t*o+"px )"})}),$(".services__description").each(function(){var n=$(this),o=.1;n.css({"-webkit-transform":"translate( 0px, "+t*o+"px )",transform:"translate( 0px, "+t*o+"px )"})}),$(".promo__subtitle").each(function(){var n=$(this),o=.02;n.css({"-webkit-transform":"translate( "+t*o+"px, 0px )",transform:"translate( "+t*o+"px, 0px )"})}),$(".promo__description").each(function(){var n=$(this),o=-.02;n.css({"-webkit-transform":"translate( "+t*o+"px, 0px )",transform:"translate( "+t*o+"px, 0px )"})})},r=function(){var t=$(window).scrollTop();$(".hero__logo").each(function(){var n=$(this),o=-.9,e=.2;n.css({top:t*o,"-webkit-transform":"translate( 0px, "+t*e+"px )",transform:"translate( 0px, "+t*e+"px )"})})},c=function(t){var n=1.2,o=170,i=t.originalEvent.wheelDelta/120||-t.originalEvent.detail/3,s=e.scrollTop(),a=s-parseInt(i*o);TweenMax.to(e,n,{scrollTo:{y:a,autoKill:!0},ease:Power1.easeOut,overwrite:5})},l=function(){o[0].obj=n,r(),s()};n.setCanUseScroll=function(t){i=t},l()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return m($(this).attr("data-popup")),!1}}),c.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},m=function(o){v(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},v=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
