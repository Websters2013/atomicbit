!function(){$(function(){$(window).on({load:function(){$("html, body").animate({scrollTop:0},1)}}),$.each($(".site__header"),function(){new e($(this))}),$.each($(".menu"),function(){new n($(this))}),$.each($(".preloader"),function(){new o($(this))}),$.each($(".sub-menu"),function(){new a($(this)),new t($(this))}),$.each($(".case__project"),function(){new a($(this))}),$.each($(".case__main-slider"),function(){new a($(this))}),$.each($(".site"),function(){new i($(this))})});var t=function(t){var e=t,n=$("html, body"),o=e.find(".sub-menu__item"),a=$(window),i=function(){o.on({click:function(){var t=$(this),e=t.data("margin");return void 0==e&&a.outerWidth()<1200?e=75:void 0==e&&a.outerWidth()>=1200&&(e=283),n.animate({scrollTop:$(t.attr("href")).offset().top-e},600),!1}})},s=function(){i()};s()},e=function(t){var e,n=this,o=t,a=!0,i=$(".hero"),s=$(window),r=function(){s.on({DOMMouseScroll:function(t){var e=t.originalEvent.detail;if(e){var n=e>0?1:-1;c(n)}},mousewheel:function(t){var e=t.originalEvent.wheelDelta;if(e){var n=e>0?-1:1;c(n)}},touchmove:function(t){var n=t.originalEvent.touches[0].clientY;n>e?c(-1):n<e&&c(1),e=n},keydown:function(t){switch(t.which){case 32:c(1);break;case 33:c(-1);break;case 34:c(1);break;case 35:c(1);break;case 36:c(-1);break;case 38:c(-1);break;case 40:c(1);break;default:return}},scroll:function(){var t=340;i.length>0&&(t=i.outerHeight()),s.scrollTop()>t?o.addClass("fixed"):o.removeClass("fixed")}})},c=function(t){t>0&&!o.hasClass("hidden")&&s.scrollTop()>o.outerHeight()&&a?f():t<0&&o.hasClass("hidden")&&a&&l()},l=function(){o.removeClass("hidden")},f=function(){o.addClass("hidden")},u=function(){o[0].obj=n,r()};n.setCanUseScroll=function(t){a=t},u()},n=function(t){var e=t,n=$(".menu-mobile-btn"),o=$("html"),a=e.find(".menu__close"),i=function(){s()},s=function(){n.on("click",function(){return r(),!1}),a.on("click",function(){return c(),!1})},r=function(){e.addClass("visible"),o.css("overflow-y","hidden")},c=function(){e.removeClass("visible"),o.removeAttr("style")};i()},o=function(t){var e=t,n=e.find(".preloader__bar"),o=!1,a=!1,i=(e.data("delay"),$(window)),s=function(){i.on({load:function(){a=!0}})},r=function(){s(),c()},c=function(){var t=Math.floor(10*Math.random())+1,i=t;n.animate({width:""+t+"%"},200),setTimeout(function(){setInterval(function(){var t=Math.floor(90*Math.random())+1;t<90&&t>i&&(i=t,n.animate({width:""+t+"%"},200))},500)},1e3),setInterval(function(){a&&(n.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),o=!0)},500)};r()},a=function(t){var e,n,o,a=t,i=a.find(".sub-menu__swiper"),s=a.find(".case__project-swiper"),r=a.find(".case__main-swiper"),c=a.find(".sub-menu__prev"),l=a.find(".case__project-prev"),f=a.find(".case__main-slider-prev"),u=a.find(".sub-menu__next"),p=a.find(".case__project-next"),h=a.find(".case__main-slider-next"),d=a.find(".case__project-pagination"),m=a.find(".case__main-slider-pagination"),_=a.find(".sub-menu__item"),v=$(window),w=function(){e=v<1200?new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loopAdditionalSlides:0,loop:!1,onInit:function(){var t=_.filter(".active").index();i[0].swiper.slideTo(t,500,!1)}}):new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:3,loopAdditionalSlides:0,loop:!1,nextButton:u,prevButton:c,onInit:function(){var t=_.filter(".active").index();i[0].swiper.slideTo(t,500,!1)}}),o=new Swiper(s,{autoplay:!1,speed:500,effect:"fade",slidesPerView:"auto",loop:!0,nextButton:p,prevButton:l,pagination:d}),n=new Swiper(r,{autoplay:!1,speed:500,effect:"fade",slidesPerView:"auto",loop:!0,nextButton:h,prevButton:f,pagination:m})},x=function(){},b=function(){x(),w()};b()},i=function(t){var e=this,n=t,o=$(window),a=!0,i=function(){o.on({scroll:function(){var t=$(window).scrollTop();o.outerWidth()>1200&&s(t)},mousewheel:function(t){a&&(t.preventDefault(),c(t))},DOMMouseScroll:function(t){a&&(t.preventDefault(),c(t))}})},s=function(t){t<100?($(".hero__logo").removeClass("topper"),$(".hero__logo-img").each(function(){var e=$(this),n=-.8;e.css({top:t*n})}),$(".hero__logo-name").each(function(){var e=$(this),n=-.2;e.css({top:t*n})})):t>=100&&($(".hero__logo").addClass("topper"),$(".hero__logo-img").each(function(){var e=$(this),n=.1;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".hero__title").each(function(){var e=$(this),n=.1;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".hero__logo-name").each(function(){var e=$(this),n=.13;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".hero__logo-shadow").each(function(){var e=$(this),n=.002;e.css({"-webkit-transform":"scale("+(t+200)*n+")",transform:"scale("+(t+200)*n+")"})})),$(".hero__logo-name-clarification").each(function(){var e=$(this),n=.005;e.css({opacity:2-(t+200)*n})}),$(".services__title").each(function(){var e=$(this),n=.02;e.css({"-webkit-transform":"translate( "+t*n+"px, 0px )",transform:"translate( "+t*n+"px, 0px )"})}),$(".services__subtitle").each(function(){var e=$(this),n=.05;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".services__description").each(function(){var e=$(this),n=.02;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".promo__subtitle").each(function(){var e=$(this),n=.02;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".promo__description").each(function(){var e=$(this),n=.04;e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".portfolio__item-content").each(function(){var e=$(this),n=e.data("koef");e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".services__item-title").each(function(){var e=$(this),n=e.data("koef");e.css({"-webkit-transform":"translate( "+t*n+"px, 0px )",transform:"translate( "+t*n+"px, 0px )"})}),$(".blog__item-content").each(function(){var e=$(this),n=e.data("koef");e.css({"-webkit-transform":"translate( 0px, "+t*n+"px )",transform:"translate( 0px, "+t*n+"px )"})}),$(".case__project-text").each(function(){var e=$(this),n=e.data("koef");e.css({"-webkit-transform":"translate( "+t*n+"px, 0px )",transform:"translate( "+t*n+"px, 0px )"})})},r=function(){var t=0;$(".hero__logo").removeClass("topper"),$(".hero__logo-img").each(function(){var e=$(this),n=-.8;e.css({top:t*n})}),$(".hero__logo-name").each(function(){var e=$(this),n=-.2;e.css({top:t*n})}),$(".hero__logo-shadow").each(function(){var e=$(this),n=.002;e.css({"-webkit-transform":"scale("+(t+200)*n+")",transform:"scale("+(t+200)*n+")"})})},c=function(t){var e=1.2,n=170,a=t.originalEvent.wheelDelta/120||-t.originalEvent.detail/3,i=o.scrollTop(),s=i-parseInt(a*n);TweenMax.to(o,e,{scrollTo:{y:s,autoKill:!0},ease:Power1.easeOut,overwrite:5})},l=function(){n[0].obj=e,r(),i()};e.setCanUseScroll=function(t){a=t},l()}}();
!function(){"use strict";$(function(){$.each($(".anchor"),function(){new t($(this))})});var t=function(t){var n=t,o=$("html, body"),i=$(window),c=function(){n.on({click:function(){var t=$(this),n=t.data("margin");return void 0==n&&i.outerWidth()<1200?n=60:void 0==n&&i.outerWidth()>=1200&&(n=80),o.animate({scrollTop:$(t.attr("href")).offset().top-n},600),!1}})},r=function(){c()};r()}}();
!function(){$(function(){$(".popup").each(function(){new e($(this))})});var e=function(e){var o=this,n=40,t=$(".popup__open"),i=e,s=i.find(".popup__close, .popup__cancel"),p=i.find(".popup__wrap"),c=i.find(".popup__content"),u=$("html"),r=$(window),a=setTimeout(function(){},1),d=function(){r.height()-2*n-p.height()>0?p.css({top:(r.height()-2*n-p.height())/2}):p.css({top:0})},l=function(){var e,o=document.createElement("div");return o.className="popup__scrollbar-measure",document.body.appendChild(o),e=o.offsetWidth-o.clientWidth,document.body.removeChild(o),e},f=function(){i.css({overflowY:"hidden"}),u.removeAttr("style"),i.removeClass("popup_opened"),i.addClass("popup_hide"),a=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),$("select")[0].obj.close(),$(".site")[0].obj.setCanUseScroll(!0),$(".site__header")[0].obj.setCanUseScroll(!0)},h=function(){i[0].obj=o,_()},_=function(){r.on({resize:function(){d()},keydown:function(e){switch(e.which){case 27:f();break;default:return}}}),t.on({click:function(){return m($(this).attr("data-popup")),!1}}),s.on({click:function(){return f(),!1}})},m=function(e){v(e),u.css({overflowY:"hidden",paddingRight:l()}),i.addClass("popup_opened"),d(),google.maps.event.trigger($(".map")[0],"resize"),$(".site")[0].obj.setCanUseScroll(!1),$(".site__header")[0].obj.setCanUseScroll(!1)},v=function(e){var o=c.filter(".popup__"+e);c.css({display:"none"}),o.css({display:"block"})};h()}}();
$(function(){$("select").each(function(){new WebstersSelect({obj:$(this),optionType:1,showType:2})})});var WebstersSelect=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),u=$("body"),f=$(".popup"),h=!1,b=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},v=function(){h=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},w=function(){o[0].obj=n,b(),_(),g()},g=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),h?v():x()}}),r.on({click:function(){h&&v()}}),f.on({click:function(){h&&v()}}))},_=function(){!s||l?m():1==s&&y()},y=function(){d.addClass("websters-select_custom")},m=function(){d.addClass("websters-select_mobile")},x=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),d.offset()),l=0,p=o.find("option:selected").index(),f=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),h&&t.remove(),h=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+f+'"></div>'),o.find("option").each(function(e){var t=$(this);e==p?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),u.append(t),d.addClass("websters-select_opened"),t.css({width:d.outerWidth(),left:s.left,top:s.top+d.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return h},n.close=function(){void 0!=t&&v()},w()};
!function(){$(function(){$.each($(".map"),function(){new e($(this))})});var e=function(e){var t=e.data("map"),o=null,l=e,s=function(){},n=function(){t.center=new google.maps.LatLng(t.center[0],t.center[1]),$.each(t.points,function(e){t.points[e]=new google.maps.LatLng(this[0],this[1])})},r=function(){n(),google.maps.event.addDomListener(window,"load",a),s()},a=function(){var e="custom_style",s=[{featureType:"all",elementType:"labels.text.fill",stylers:[{saturation:36},{color:"#000000"},{lightness:40}]},{featureType:"all",elementType:"labels.text.stroke",stylers:[{visibility:"on"},{color:"#000000"},{lightness:16}]},{featureType:"all",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"administrative",elementType:"geometry.fill",stylers:[{color:"#000000"},{lightness:20}]},{featureType:"administrative",elementType:"geometry.stroke",stylers:[{color:"#000000"},{lightness:17},{weight:1.2}]},{featureType:"landscape",elementType:"geometry",stylers:[{color:"#000000"},{lightness:20}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#000000"},{lightness:21}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#000000"},{lightness:17}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#000000"},{lightness:29},{weight:.2}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#000000"},{lightness:18}]},{featureType:"road.local",elementType:"geometry",stylers:[{color:"#000000"},{lightness:16}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#000000"},{lightness:19}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#000000"},{lightness:17}]}],n={zoom:t.zoom,center:t.center,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,e]},mapTypeId:e,disableDefaultUI:!0,scrollwheel:!1,gestureHandling:"cooperative",zoomControl:!0,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,fullscreenControl:!1},r={name:"Custom Style"},a=null,i="img/map-pin.svg";o=new google.maps.Map(l[0],n),a=new google.maps.StyledMapType(s,r),o.mapTypes.set(e,a),$.each(t.points,function(){new google.maps.Marker({position:this,map:o,icon:i})})};r()}}();
!function(){"use strict";$(function(){$(".contact-us__form").length&&new t($(this))});var t=function(t){var e=t,a=e.find(".contacts__message_error"),s=e.find(".contacts__message_success"),n=e.find(".contacts__message-wrap"),o=e.find("input, textarea"),i=e.find("[data-required]"),l=e.find("select"),c=new XMLHttpRequest,r=function(){v()},u=function(){i.each(function(){var t=$(this);""!==t.val()&&"0"!==t.val()||(t.addClass("not-touched"),t.parents(".websters-select").addClass("not-touched"),p(t)),t.hasClass("valid")&&t.removeClass("not-touched")}),$("#comments__rate-input").hasClass("not-touched")&&$("#comments__rate").addClass("not-valid")},v=function(){i.on({focus:function(){$(this).removeClass("not-touched")},focusout:function(){var t=$(this);p(t)},keyup:function(){var t=$(this);t.hasClass("not-valid")&&p(t)}}),o.on({focusout:function(){var t=0;o.each(function(){var e=$(this);e.val().length>0&&(t+=1)}),0===t&&(o.removeClass("not-valid"),a.removeClass("visible"))}}),e.on({submit:function(){return u(),0!==i.filter(".not-valid").length&&(a.addClass("visible"),n.css("height",a.outerHeight())),i.hasClass("not-touched")||i.hasClass("not-valid")||l.hasClass("not-valid")?(e.find(".not-touched:first").focus(),e.find(".not-valid:first").focus(),!1):(d(),!1)}}),l.on("change",function(){var t=$(this),e=t.parents(".websters-select");t.removeClass("not-valid not-touched"),e.removeClass("not-valid not-touched")})},d=function(){c=$.ajax({url:"php/form.php",data:{name:$("input[name=name]").val(),surname:$("input[name=surname]").val(),email:$("input[name=email]").val(),phone:$("input[name=phone]").val(),company:$("input[name=company]").val(),website:$("input[name=website]").val(),service:$("select[name=service]").val(),scope:$("textarea[name=scope]").val()},dataType:"json",type:"GET",success:function(t){1==t&&(s.addClass("visible"),n.css("height",s.outerHeight()))},error:function(t){"abort"!=t.statusText&&console.log("err")}})},m=function(t){t.addClass("not-valid"),t.parents(".websters-select").addClass("not-valid"),t.removeClass("valid"),$("#comments__rate-input").hasClass("not-valid")&&$("#comments__rate").addClass("not-valid")},h=function(t){t.removeClass("not-valid"),t.parents(".websters-select").removeClass("not-valid"),t.addClass("valid")},f=function(t){var e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return e.test(t)},p=function(t){var e=t.attr("type"),s=t[0].tagName;return("email"!==e&&"text"!==e&&"tel"!==e||""!==t.val())&&("email"!==e||f(t.val()))?"textarea"==s.toLocaleLowerCase()&&""===t.val()?(m(t),!1):"select"==s.toLocaleLowerCase()&&0===t.val()?(m(t),!1):(h(t),void(0===i.filter(".not-valid").length&&(a.removeClass("visible"),n.css("height",0)))):(m(t),!1)};r()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
